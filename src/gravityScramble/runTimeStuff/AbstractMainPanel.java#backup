package gravityScramble.runTimeStuff;
import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import gravityScramble.touchables.*;
import gravityScramble.touchables.obstacles.*;
import gravityScramble.touchables.enemies.*;
import gravityScramble.touchables.powerups.*;
import gravityScramble.clickables.*;
import gravityScramble.decorations.*;
import gravityScramble.switchActions.*;
/**
 * Abstract class AbstractMainPanel - write a description of the class here
 * 
 * @author (your name here)
 * @version (version number or date here)
 */
public abstract class AbstractMainPanel extends JPanel
{
    protected Player player;
    protected HelpBubbleDisplay helpDisplay;
    protected Fireball fireball;
    protected ArrayList<HelpBubble> helpBubbles;
    protected ArrayList<Decoration> decorations;
    protected ArrayList<Enemy> enemies;
    protected ArrayList<Boss> bosses;
    protected ArrayList<GravityChamber> gravityChambers;
    protected ArrayList<Spikes> spikes;
    protected ArrayList<FireCube> fireCubes;
    protected ArrayList<Switch> switches;
    protected ArrayList<Powerup> powerups;
    protected ArrayList<Checkpoint> checkpoints;
    protected ArrayList<MenuButton> menuButtons;
    protected ArrayList<ToggleButton> toggleButtons;
    protected ArrayList<TextInput> textInputs;
    protected ExitPortal exitPortal;
    protected Color sky;
    protected Color ground;
    protected boolean isMenu;
    protected String menu = "none";
    private Options options;
    private int width = 0;
    private int height = 0;
    private int levelFinished = 0;
    public void makeVariables(boolean menu, Color sk, Color grnd)
    {
        isMenu = menu;
        sky = sk;
        ground = grnd;
    }
    
    public void makeButtons()
    {
        if(isMenu)
        {
            
        }
        else
        {
            menuButtons.add(new MenuButton(1100,10,200,"Pause","none","Pause Menu"));
            menuButtons.add(new MenuButton(500,300,200,"Continue","Pause Menu","none"));
            menuButtons.add(new MenuButton(500,350,200,"Options","Pause Menu","Options"));
            menuButtons.add(new MenuButton(500,400,200,"Exit","Pause Menu","none"));
            menuButtons.add(new MenuButton(1100,10,200,"Save","Options","Pause Menu"));
        }
        toggleButtons.add(new ToggleButton(500,50,100,"On","Off",options.getDrawOutline(),"Options","Draw Outlines"));
        toggleButtons.add(new ToggleButton(500,150,100,"On","Off",options.getReviveEnemies(),"Options","Revive Enemies"));
    }
    
    public void paintComponent(Graphics g)
    {
        g.setColor(sky);
        g.fillRect(0,0,1300,750);
        g.setColor(ground);
        int altitude = 0;
        if(player.getAltitude()>=300)
        {
            altitude = player.getAltitude()-300;
        }
        g.fillRect(0, 640+altitude, 1250, 100);
        int position = player.getPosition();
        for(int x = 0; x < decorations.size(); x++)
        {
            decorations.get(x).paintComponent(g, position, altitude);
        }
        for(int x = 0; x < checkpoints.size(); x++)
        {
            checkpoints.get(x).paintComponent(g, position, altitude);
            drawOutlines(checkpoints.get(x),g,position,altitude);
        }
        for(int x = 0; x < switches.size(); x++)
        {
            switches.get(x).paintComponent(g, position, altitude);
            if(switches.get(x).getActivatable())
            {
                drawOutlines(switches.get(x),g,position,altitude);
            }
        }
        exitPortal.paintComponent(g, position, altitude);
        player.paintComponent(g, position, altitude);
        drawOutlines(player,g,position,altitude);
        for(int x = 0; x < enemies.size(); x++)
        {
            enemies.get(x).paintComponent(g, position, altitude);
            if(enemies.get(x) instanceof Group)
            {
                for(int y = 0; y < ((Group)(enemies.get(x))).enemies.size(); y++)
                {
                    drawOutlines(((Group)(enemies.get(x))).enemies.get(y),g,position,altitude);
                }
            }
            else
            {
                drawOutlines(enemies.get(x),g,position,altitude);
                if(enemies.get(x) instanceof GiantCat)
                {
                    drawOutlines(((GiantCat)(enemies.get(x))).summonedCat1,g,position,altitude);
                    drawOutlines(((GiantCat)(enemies.get(x))).summonedCat2,g,position,altitude);
                    drawOutlines(((GiantCat)(enemies.get(x))).summonedBunny1,g,position,altitude);
                    drawOutlines(((GiantCat)(enemies.get(x))).summonedBunny2,g,position,altitude);
                    drawOutlines(((GiantCat)(enemies.get(x))).summonedFollower,g,position,altitude);
                }
            }
        }
        for(int x = 0; x < fireCubes.size(); x++)
        {
            fireCubes.get(x).paintComponent(g, position, altitude);
        }
        for(int x = 0; x < gravityChambers.size(); x++)
        {
            gravityChambers.get(x).paintComponent(g, position, altitude);
            if(gravityChambers.get(x) instanceof Spikes)
            {
                drawOutlines(gravityChambers.get(x),g,position,altitude);
            }
        }
        for(int x = 0; x < powerups.size(); x++)
        {
            powerups.get(x).paintComponent(g, position, altitude);
        }
        fireball.paintComponent(g, position, altitude);
        if(fireball.getActive())
        {
            drawOutlines(fireball,g,position,altitude);
        }
        for(int x = 0; x < helpBubbles.size(); x++)
        {
            helpBubbles.get(x).paintComponent(g, position, altitude);
        }
        boolean b = false;
        Boss boss = null;
        for(int x = 0; x < bosses.size(); x++)
        {
            if(bosses.get(x).getBattle())
            {
                b = true;
                boss = bosses.get(x);
            }
        }
        if(b)
        {
            Color fog = new Color(230,230,230,70);
            g.setColor(fog);
            g.fillRect(0,0,1300,750);
            g.setColor(Color.black);
            for(int x = 1; x <= boss.getHealth(); x++)
            {
                g.fillOval(1230-x*30,60,25,25);
            }
        }
        helpDisplay.paintComponent(g);
        g.setColor(Color.pink);
        for(int x = 1; x <= player.getHealth(); x++)
        {
            g.fillOval(30*x-20,10,25,25);
        }
        if(player.isTouching(exitPortal) && levelFinished<1)
        {
            levelFinished = 1;
        }
        if(levelFinished>0)
        {
            if(levelFinished<=255)
            {
                g.setColor(new Color(exitPortal.getBrightness(),0,exitPortal.getBrightness(),levelFinished));
                levelFinished++;
            }
            else
            {
                g.setColor(new Color(exitPortal.getBrightness(),0,exitPortal.getBrightness(),255));
            }
            g.fillRect(0,0,1250,750);
            if(levelFinished==256)
            {
                for(int x = 0; x < menuButtons.size(); x++)
                {
                    menuButtons.remove(0);
                }
                menuButtons.add(500,500,100,"Continue","none","none")
                levelFinished++;
            }
            if(levelFinished>255)
            {
                g.setColor(Color.white);
                g.drawString("Congratulations! Try this cheat code:",300,100);
                g.drawString("evil cat",500,300);
            }
        }
        if(!menu.equals("none"))
        {
            g.setColor(new Color(100,100,100,170));
            g.fillRect(0,0,1250,740);
        }
        for(int x = 0; x < menuButtons.size(); x++)
        {
            if(menu.equals(menuButtons.get(x).getMenu()))
            {
                menuButtons.get(x).paintComponent(g, position, altitude);
            }
        }
        for(int x = 0; x < toggleButtons.size(); x++)
        {
            if(menu.equals(toggleButtons.get(x).getMenu()))
            {
                toggleButtons.get(x).paintComponent(g, position, altitude);
            }
        }
        for(int x = 0; x < textInputs.size(); x++)
        {
            if(menu.equals(textInputs.get(x).getMenu()))
            {
                textInputs.get(x).paintComponent(g);
            }
        }
        if(menu.equals("Options"))
        {
            g.setColor(Color.black);
            g.setFont(new Font("Serif",Font.PLAIN,40));
            g.drawString("Draw Outlines",10,90);
            g.drawString("Revive Enemies",10,190);
            g.drawString("Music",10,290);
            g.drawString("Coming Soon",500,290);
        }
    }
    
    public boolean touchingUpChamber()
    {
        boolean b = false;
        for(int x = 0; x < gravityChambers.size(); x++)
        {
            if(player.isTouching(gravityChambers.get(x)) && gravityChambers.get(x).getDirection().equals("up"))
            {
                b = true;
            }
        }
        for(int x = 0; x < enemies.size(); x++)
        {
            if(canJumpOnEnemy(enemies.get(x)))
            {
                b = true;
            }
        }
        return b;
    }
    
    public boolean canJumpOnEnemy(Enemy enemy)
    {
        if(isMenu)
        {
            return false;
        }
        else
        {
            if(!(enemy instanceof Group))
            {
                return player.isTouching(enemy)&&(!enemy.getDefeated()||enemy.getBounceCounter()!=5);
            }
            else
            {
                boolean b = false;
                for(int x = 0; x < ((Group)enemy).enemies.size(); x++)
                {
                    b = b || canJumpOnEnemy(((Group)enemy).enemies.get(x));
                }
                return b;
            }
        }
    }
    
    public Color getSky()
    {
        return sky;
    }
    public Color getGround()
    {
        return ground;
    }
    
    public void setSize(int x, int y)
    {
        width = x;
        height = y;
    }
    
    public int getWidth()
    {
        return width;
    }
    public int getHeight()
    {
        return height;
    }
    
    public void drawOutlines(Touchable t, Graphics g, int position, int altitude)
    {
        if(options.getDrawOutline() && !((t instanceof Enemy) && ((Enemy)t).getDefeated()))
        {
            g.setColor(Color.white);
            g.drawRect(t.drawingPosition(position),t.drawingAltitude(altitude-t.getHeight()),t.getWidth(),t.getHeight());
        }
    }
    
    public void setOptions(Options o)
    {
        options = o;
    }
    public Options getOptions()
    {
        return options;
    }
}
